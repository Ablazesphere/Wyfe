// src/services/audioStorageService.js

const fs = require('fs').promises;
const path = require('path');
const express = require('express');
const { v4: uuidv4 } = require('uuid'); // You'll need to install this: npm install uuid

/**
 * Service for storing and serving audio files generated by ElevenLabs
 */
class AudioStorageService {
    constructor() {
        // Create the audio storage directory if it doesn't exist
        this.audioDirectory = path.join(__dirname, '../../public/audio');
        this.ensureDirectoryExists();

        // URL prefix for accessing audio files
        this.audioUrlPrefix = `${process.env.APP_URL}/audio`;
    }

    /**
     * Make sure the audio directory exists
     */
    async ensureDirectoryExists() {
        try {
            await fs.mkdir(this.audioDirectory, { recursive: true });
            console.log(`Audio directory created at ${this.audioDirectory}`);
        } catch (error) {
            console.error('Error creating audio directory:', error);
        }
    }

    /**
     * Save an audio buffer to a file and return its URL
     * @param {Buffer} audioBuffer - The audio data buffer
     * @param {String} prefix - Optional prefix for the filename
     * @returns {String} - URL to access the audio file
     */
    async saveAudio(audioBuffer, prefix = 'audio') {
        try {
            // Generate a unique filename
            const filename = `${prefix}-${uuidv4()}.mp3`;
            const filePath = path.join(this.audioDirectory, filename);

            // Write the buffer to a file
            await fs.writeFile(filePath, audioBuffer);
            console.log(`Audio file saved to ${filePath}`);

            // Return the URL for the audio file
            return `${this.audioUrlPrefix}/${filename}`;
        } catch (error) {
            console.error('Error saving audio file:', error);
            throw error;
        }
    }

    /**
     * Delete an audio file
     * @param {String} audioUrl - URL of the audio file to delete
     */
    async deleteAudio(audioUrl) {
        try {
            // Extract the filename from the URL
            const filename = path.basename(audioUrl);
            const filePath = path.join(this.audioDirectory, filename);

            // Check if the file exists
            try {
                await fs.access(filePath);
            } catch {
                console.log(`File ${filePath} does not exist, no need to delete`);
                return;
            }

            // Delete the file
            await fs.unlink(filePath);
            console.log(`Audio file deleted: ${filePath}`);
        } catch (error) {
            console.error('Error deleting audio file:', error);
        }
    }

    /**
     * Configure Express to serve the audio files
     * @param {Object} app - Express app instance
     */
    configureExpressForAudio(app) {
        // Serve audio files from the audio directory
        app.use('/audio', express.static(this.audioDirectory));
        console.log('Express configured to serve audio files');
    }

    /**
     * Clean up old audio files (could be run periodically)
     * @param {Number} maxAgeHours - Maximum age in hours for audio files
     */
    async cleanupOldFiles(maxAgeHours = 24) {
        try {
            const files = await fs.readdir(this.audioDirectory);
            const now = Date.now();
            const maxAgeMs = maxAgeHours * 60 * 60 * 1000;

            for (const file of files) {
                const filePath = path.join(this.audioDirectory, file);
                const stats = await fs.stat(filePath);
                const fileAgeMs = now - stats.mtimeMs;

                if (fileAgeMs > maxAgeMs) {
                    await fs.unlink(filePath);
                    console.log(`Deleted old audio file: ${file}`);
                }
            }
        } catch (error) {
            console.error('Error cleaning up old audio files:', error);
        }
    }
}

module.exports = new AudioStorageService();